#% text_encoding = iso8859_1
# ************************************************************
#
# (c) 2020 Realworld Software Products. All Rights Reserved.
#
# ************************************************************

_package sw

_pragma(classify_level=advanced, topic={dmdw,xml,test})
def_slotted_exemplar(:explicit_topology_rules,{})
$

_pragma(classify_level=advanced, topic={dmdw,xml,test})
_method explicit_topology_rules.default_topology_rules_xml
	## 
	## Should return an xml with 1 ({area,:area} of the 9
	## combinations in manifold test_mf

#<?xml version="1.0" encoding="ISO-10646-UCS-2" standalone="yes"?>
# <default_topology_rules>
# 	<manifold name="test_mf">
# 		<interaction geomtype1="area" geomtype2="area">
# 			<rule1>do_nothing</rule1>
# 			<rule2>do_nothing</rule2>
# 		</interaction>
# 	</manifold>
# </default_topology_rules>

	l_test << property_list.new_with(:test_mf, {{:system,
						    :|default area|,
						    :system,
						    :|default area|,
						    :do_nothing,
						    :do_nothing}}
				)

	>> dm_xml_handler.default_topology_rules_xml( l_test )
	
_endmethod
$

_pragma(classify_level=advanced, topic={dmdw,xml,test})
_method explicit_topology_rules.rules_xml
	## 
	## Must return a rope with two elements <rule1> and <rule2>
	##

	l_elem << dm_xml_handler.rules_xml({:do_nothing,:do_nothing})
	>> l_elem
	
_endmethod
$

_pragma(classify_level=advanced, topic={dmdw,xml,test})
_method explicit_topology_rules.test()
	## 
	## 

	l_mock << mck!col.new_with(:name,:a_col,:external_name,"A col")
	l_col << dm_xml_handler.topology_collection1_xml( l_mock )
	l_man << dm_xml_handler.manifold_xml("a_manifold",{l_col})
	l_top << dm_xml_handler.explicit_topology_rules_xml(l_man)
	
	>> l_top
_endmethod
$

remex(:mck!col)
$
def_slotted_exemplar(:mck!col,{},:property_list)
$
_method mck!col.name
	>> _self[:name]
_endmethod
$
_method mck!col.external_name
	>> _self[:external_name]
_endmethod
$

