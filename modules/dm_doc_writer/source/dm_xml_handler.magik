#% text_encoding = iso8859_1
# ************************************************************
#
# (c) 2019 Realworld Software Products. All Rights Reserved.
#
# ************************************************************

_package sw

remex(:dm_xml_handler)
$

_pragma(classify_level=advanced, topic={dmdw,dm_doc_writer})
##
## does the conversion of datamodel info to xml. The methods
## with _xml as suffix return an xml element suitable for
## inclusion into the datamodel.xml
##
def_slotted_exemplar(:dm_xml_handler,{})
$

_pragma(classify_level=restricted, topic={dmdw,dm_doc_writer},usage={internal})
dm_xml_handler.define_shared_constant(
	:topology_field_sorter,
	_proc @sort(a,b)
		>> _if (l_a<<(a.owner.name _cf b.owner.name)) _isnt _maybe 
		   _then >> l_a
		   _else >> a.name _cf b.name
		   _endif
			
	_endproc,
	:public)
$

_pragma(classify_level=basic, topic={dmdw,dm_doc_writer},usage={internal})
##
## The XML namespace and schema properties of <dmdw:datamodel>
##
_method dm_xml_handler.xml_header_info
	>> property_list.new_with(
		   :|xmlns:dmdw|,"https://boogert-lab.nl/dmdw",
		   :|xmlns:xsi|,"http://www.w3.org/2001/XMLSchema-instance",
		   :|xsi:noNamespaceSchemaLocation|,write_string("https://github.com/boogert-lab/dmdw DMDW-Datamodel-",
								 dm_xml_writer.schema_version_main,
								 ".xsd"),
		   :schema_version,dm_xml_writer.schema_version_main
			 )
_endmethod
$

_pragma(classify_level=basic, topic={dmdw,dm_doc_writer},usage={internal})
_method dm_xml_handler.urn_handlers
	##
	## A property list keyed on elements that should have an urn
	## attached in the XML. The value is the handler that will be
	## used for those elements.
	## 
	>> property_list.new_with(:ace,urn_manager.get_handler_by_type(:record),
				  :datamodel_history_record,urn_manager.get_handler_by_type(:record),
				  :category,urn_manager.get_handler_by_type(:record),
				  :manifold,sw:urn_manager.get_handler_by_type(:manifold),
				  :collection,sw:urn_manager.get_handler_by_type(:dataset_collection),
				  :record,urn_manager.get_handler_by_type(:record),
				  :enumerator,urn_manager.get_handler_by_type(:record),
				  :field,urn_manager.get_handler_by_type(:basic_field))
_endmethod
$

_pragma(classify_level=basic, topic={dmdw,dm_doc_writer},usage={internal})
_method dm_xml_handler.urn_prop_for( p_element_type, p_object )
	## 
	## Returns a property_list :urn,<urn> or when no handler could
	## be found an empty property_list
	##

	>> _if (l_handler << _self.urn_handlers[p_element_type]) _isnt _unset 
	   _then
		   >> property_list.new_with(:urn,l_handler.get_urn_from_object( p_object))
	   _else
		   condition.raise(:warning,:string,write_string("Warning - no urn handler for type ",p_element_type))
		   >> property_list.new()
	   _endif
		      
_endmethod
$

_pragma(classify_level=advanced, topic={dmdw,dm_doc_writer})
_method dm_xml_handler.datamodel_xml( ds, properties)
	##
	## Creates the top level element
	##   <datamodel> and
	##    <datamodel_info>
	##
	## properties used are:
	## :ace_name 
	## :dm_product_name
	## :dm_module_name
	## :expand_tables?
	## :include_urns?
	##

	_local l_props << _self.xml_header_info.copy()

	l_props[:creation_date] << date_time.now()
	
	_local l_elements << rope.new()
	_local l_xml << sw:simple_xml_thing.new(:datamodel, l_elements, l_props)


	# datamodel_info
	
	_local subs << rope.new()
	_local l_dd << sw:simple_xml_thing.new(:datamodel_info, subs)

	subs.add(_self.datamodel_detail_xml(:dataset,ds.name.write_string))
	subs.add(_self.datamodel_detail_xml(:external_name,ds.external_name))
	subs.add(_self.datamodel_detail_xml(:current_dd_version,ds.current_dd_version))
	subs.add(_self.datamodel_version_of(ds, properties))
	subs.add(_self.datamodel_detail_xml(:expand_tables,write_string(properties[:expand_tables?])))
	subs.add(_self.datamodel_detail_xml(:include_urns,write_string(properties[:include_urns?])))
	subs.add(_self.datamodel_detail_xml(:ace_name,properties[:ace_name]))

	l_alt <<
		_if (l_altname << ds.alternative_path_name().write_string) ~= ds.top_alternative_name
		_then >> l_altname
		_else >> ds.top_alternative_name
		_endif
	subs.add(_self.datamodel_detail_xml(:alternative_path_name,l_alt))
	
	_local l_file << properties[:update_file].default("").replace_all_instances_of("\","/")
	_if l_file.empty?
	_then subs.add(_self.datamodel_detail_xml(:updates,""))
	_else (l_name,l_dir) << system.pathname_components( l_file )
	      subs.add(_self.datamodel_detail_xml(:updates,l_name,property_list.new_with(:fullpath,l_file)))
	_endif

	subs.add(_self.datamodel_detail_xml(:text_translation_disabled,!disable_text_translation?!))
	subs.add(_self.datamodel_detail_xml(:active_languages,write_string(!current_languages!.size)))
	_for i,j _over !current_languages!.fast_keys_and_elements()
	_loop subs.add(_self.datamodel_detail_xml(:active_language,j,property_list.new_with(:order,i.write_string)))
	_endloop

	
	l_elements.add(l_dd)

	>> l_xml
	
_endmethod
$

_pragma(classify_level=advanced, topic={dmdw,dm_doc_writer})
_private _method dm_xml_handler.datamodel_version_of(ds,properties)
	## 
	## Returns a datamodel_version element with "0" when it is
	## undetermined or with the value of
	##
	## ds.datamodel_version(
	##   properties[:dm_product_name]
	##   properties[:dm_module_name]
	## )
	##

	dm_version << "0"
	
	_if properties _isnt _unset _andif
	    (dm_prod << properties[:dm_product_name]) _isnt _unset _andif
	    (dm_module << properties[:dm_module_name]) _isnt _unset
	_then

		_if (dm_version << ds.datamodel_version(dm_prod,dm_module)) _isnt _unset 
		_then 
			write("Datamodel version determined ",dm_version)
		_else
			write("Datamodel version could not be determined for: ",
			      "dm_product ",dm_prod," dm_module ",dm_module)	
		_endif
		v << _self.datamodel_detail_xml(:datamodel_version,dm_version,
						property_list.new_with(:dm_product_name,dm_prod,
								       :dm_module_name,dm_module))
		
	_else
		v << _self.datamodel_detail_xml(:datamodel_version,dm_version)
	_endif

	>> v
_endmethod
$

_pragma(classify_level=advanced, topic={dmdw,dm_doc_writer})
_method dm_xml_handler.datamodel_history_xml( ds, _optional props )
	##
	## returns from ds collection :sw_gis!datamodel_history
	## a simple_xml object :datamodel_history
	## containing selected records as :datamodel_history_record
	##
	## props passed to ds.product_history()
	##
	##  :dm_product_name
	##  :dm_module_name
	##  :dm_predicate
	##


	_local l_table << ds.collections[:sw_gis!datamodel_history]
	_local l_fields << l_table.ordered_fields
	_local l_props << props.default(property_list.new())
	_local l_records << ds.product_history(l_props[:dm_product_name],
					       l_props[:dm_module_name],
					       l_props[:dm_predicate])
	
	write("Product history select returned ",l_records.size," records")
	
	_local l_rope << rope.new()
	_local l_xml << sw:simple_xml_thing.new(:datamodel_history,l_rope)

	_local l_str << write_string("The product history shown is based on product ",
				     l_props[:dm_product_name].default("ALL"),
				     ", module ",
				     l_props[:dm_module_name].default("ALL"),
				     _if (pr << l_props[:dm_predicate]) _isnt _unset 
				     _then >> write_string(", using predicate ",pr,%.)
				     _else >> ", not using any predicate."
				     _endif)
	
	l_rope.add(sw:simple_xml_thing.new(:datamodel_history_meta,{l_str}))


	_for i_rec _over l_records.fast_elements()
	_loop
		##DEBUG write(i_rec)
		_local l_flds << rope.new()
		_local l_rec_props << _self.urn_prop_for(:record,i_rec)
		i_xml << sw:simple_xml_thing.new(:datamodel_history_record,l_flds,l_rec_props)

		_for i_fld _over l_fields.fast_elements()
		_loop
			l_props << property_list.new()
			
			i_fldname << i_fld.name
			i_fldvalue << i_rec.perform(i_fldname).write_string
			l_props[:key] << i_fld.is_key?
			i_fldxml << sw:simple_xml_thing.new(i_fldname,{i_fldvalue},l_props)
			l_flds.add(i_fldxml)
		_endloop

		l_rope.add(i_xml)

	_endloop

	>> l_xml
_endmethod
$

_pragma(classify_level=advanced, topic={dmdw,dm_doc_writer})
_method dm_xml_handler.datamodel_detail_xml(key,value,_optional atts)
	## 
	## 
	>> sw:simple_xml_thing.new(:dm_+key,{value.write_string},atts)
_endmethod
$

_pragma(classify_level=advanced, topic={dmdw,dm_doc_writer})
_method dm_xml_handler.global_properties_xml(p_elements)
	## 
	## 
	>> sw:simple_xml_thing.new(:global_properties,p_elements)
_endmethod
$

_pragma(classify_level=advanced, topic={dmdw,dm_doc_writer})
_method dm_xml_handler.category_xml( p_elements, a_category, p_include_urn?)
	## 
	##

	_local l_cat_props << property_list.new()
	
	_if a_category.is_a_datastore_object?
	_then
		l_cat_props[:name] << a_category.name.write_string
		_if p_include_urn?
		_then l_urn << _self.urn_prop_for(:record,a_category)
		      l_cat_props.add_all(l_urn)
		_endif
		
	_else
		l_cat_props[:name] << a_category
	_endif
	
	>> sw:simple_xml_thing.new(:category,p_elements,l_cat_props)

_endmethod
$

_pragma(classify_level=advanced, topic={dmdw,dm_doc_writer})
_method dm_xml_handler.collection_xml( a_col, properties, p_include_urn?)
	## 
	## 
	
	
	_local l_atts << property_list.new_with(:name, a_col.name.write_string,
						:external_name, a_col.external_name.write_string)
	_if p_include_urn? _is _true
	_then l_urn << _self.urn_prop_for(:collection, a_col)
	      l_atts.add_all(l_urn)
	_endif
	
	_if properties _isnt _unset 
	_then l_atts.add_all(properties)
	_endif

	_if (l_recex << a_col.record_exemplar).responds_to?(:default_geom_field_name)
	_then l_atts[:default_geom_field_name] << l_recex.default_geom_field_name
	_endif
	
	
	>> sw:simple_xml_thing.new(:collection,rope.new(),l_atts)

_endmethod
$

_pragma(classify_level=advanced, topic={dmdw,dm_doc_writer})
_method dm_xml_handler.joins_using_field_xml( a_fld )
	## 
	## 

	_local l_rope << rope.new()
	_local l_xml << simple_xml_thing.new(:used_in_join,l_rope)

	_local (l_flds,l_joins) << a_fld.used_in_joins()

	_for i_fld _over l_flds.fast_elements()
	_loop l_rope.add(simple_xml_thing.new(:join_field,i_fld.name.write_string))
	_endloop

	_for i_join _over l_joins.fast_elements()
	_loop l_rope.add(simple_xml_thing.new(:joins,i_join.name.write_string))
	_endloop

	>> l_xml
		
_endmethod
$

_pragma(classify_level=advanced, topic={dmdw,dm_doc_writer})
_private _method dm_xml_handler.field_type_for( a_fld )
	## 
	## 
	
	>> _if a_fld.is_join?
	   _then
		   >> :join
		   
	   _elif a_fld.is_geometry?		       
	   _then
		   >> :geometry
		   
	   _elif _not a_fld.is_physical?
	   _then
		   >> :derived
	   _else
		   >> :physical
	   _endif
	
_endmethod
$

_pragma(classify_level=advanced, topic={dmdw,dm_doc_writer})
_method dm_xml_handler.field_xml( a_fld, properties, p_include_urn?)
	## 
	## 

	_local l_type << _self.field_type_for( a_fld )

	_local l_atts << property_list.new_with(:type,l_type)

	_if l_type _is :geometry
	_then
		_if (mapped? << a_fld.mapped?) _is _true
		_then l_atts[:mapped] << _true 
		_elif (f << a_fld.mapped_to_geom_field()) _isnt _unset
		_then l_atts[:mapped_to] << _true 
		_endif
	_endif
		
	_if properties _isnt _unset 
	_then l_atts.add_all(properties)
	_endif

	_if p_include_urn? _is _true
	_then l_urn << _self.urn_prop_for(:field, a_fld)
	      l_atts.add_all(l_urn)
	_endif

	_local l_field_elements << rope.new()	
	_local l_field_xml << sw:simple_xml_thing.new(:field,l_field_elements,l_atts)

	# Names
	l_field_elements.add( sw:simple_xml_thing.new(:external_name,{a_fld.external_name.write_string}) )
	l_field_elements.add( sw:simple_xml_thing.new(:name,{a_fld.name.write_string}) )

	# Part of key info:
	l_field_elements.add(_self.joins_using_field_xml( a_fld ))

	# Size:
	l_size << _if (f_type << a_fld.type) _isnt _unset 
		  _then >> f_type.size.write_string
		  _else >> ""
		  _endif
	l_field_elements.add( sw:simple_xml_thing.new(:size,l_size) )
	l_field_elements.add( sw:simple_xml_thing.new(:key,{a_fld.is_key?.write_string}))
	l_field_elements.add( sw:simple_xml_thing.new(:mandatory,{a_fld.mandatory?.write_string}))
	
	l_field_elements.add( sw:simple_xml_thing.new(:default_value,{a_fld.default_value.write_string}))

	_if a_fld.responds_to?(:unset_value)
	_then l_field_elements.add( sw:simple_xml_thing.new(:unset_value,{a_fld.unset_value.write_string} ))
	_endif

	# Type
	l_field_elements.add( sw:simple_xml_thing.new(:type,l_type) )
	
	# Stored unit
	_if a_fld.has_stored_unit?
	_then l_field_elements.add( _self.dm_xml_stored_unit_xml( a_fld.stored_unit ))
	_else l_field_elements.add( _self.dm_xml_stored_unit_xml( _unset) )
	_endif
	
	# Add field specific elements:
	_local l_field_specific_xml << 
		_if l_type _is :join
		_then >> _self.join_field_xml( a_fld )
		_elif l_type _is :geometry
		_then >> _self.geometry_field_xml( a_fld )
		_elif l_type _is :physical
		_then >> _self.physical_field_xml( a_fld )
		_elif l_type _is :derived
		_then >> _self.derived_field_xml( a_fld )
		_endif

	_local l_sub_type << sw:simple_xml_thing.new(:sub_type,{l_field_specific_xml})
	l_field_elements.add( l_sub_type )
	
	# Description:	
	_if (l_text << properties[:description]) _is _unset _andif 
	    (l_text << a_fld.defined_help_text) _is _unset
	_then l_text << a_fld.help_text
	_endif
	l_field_elements.add(sw:simple_xml_thing.new(:help_text,{l_text}))

	>> l_field_xml

_endmethod
$

_pragma(classify_level=advanced, topic={dmdw,dm_doc_writer})
_method dm_xml_handler.dm_xml_stored_unit_xml( a_unit )
	## 
	## 

	_if a_unit _is _unset 
	_then _return sw:simple_xml_thing.new(:stored_unit)
	_endif
	
	_local l_props << property_list.new()
	_local l_rope << rope.new()

	l_rope.add( sw:simple_xml_thing.new( :dimensionality, a_unit.unit_dimensionality.name ))
	l_rope.add( sw:simple_xml_thing.new( :short_description, a_unit.short_description ))
	l_rope.add( sw:simple_xml_thing.new( :long_description, a_unit.long_description ))

	>> sw:simple_xml_thing.new(:stored_unit,l_rope,l_props)
	
_endmethod
$

_pragma(classify_level=advanced, topic={dmdw,dm_doc_writer})
#_private _method dm_xml_handler.physical_field_xml( a_field )	
_method dm_xml_handler.physical_field_xml( a_field )
	## 
	## 

	>> _self.sw_field_type_xml( a_field.type )

_endmethod
$

_pragma(classify_level=advanced, topic={dmdw,dm_doc_writer})
_private _method dm_xml_handler.derived_field_xml( a_field )
	## 
	## 

	>> _self.sw_field_type_xml( a_field.type )

_endmethod
$

_pragma(classify_level=advanced, topic={dmdw,dm_doc_writer})
_method dm_xml_handler.sw_field_type_xml( p_field_type )
	## 
	## 

	_local l_rope << rope.new()
	_local l_xml << sw:simple_xml_thing.new(:sw_field_type,l_rope,property_list.new_with(:name,p_field_type.name))

	_if (l_enu << p_field_type.enumerator) _isnt _unset
	_then l_rope.add( _self.enumerated_xml( l_enu ))
	_endif
	
	# only datastore field types know about phys_type, but all
	# field_types will repond to .class and .element_class
	_local phys_type <<
		_if p_field_type.responds_to?(:phys_type)
		_then >> p_field_type.phys_type
		_elif p_field_type.is_vector?
		_then >> p_field_type.element_class.class_name
		_else >> p_field_type.class.class_name
		_endif
	
	l_element << sw:simple_xml_thing.new(:phys_type,{}, property_list.new_with(:type,write_string(phys_type)))
	l_rope.add(l_element)

	>> l_xml
	
_endmethod
$

_pragma(classify_level=advanced, topic={dmdw,dm_doc_writer})
#_private _method dm_xml_handler.join_field_xml( a_join_field )
_method dm_xml_handler.join_field_xml( a_join_field )
	##
	##

	_local l_type << a_join_field.join_type

	_local l_elems << rope.new()
	_local l_top_props << property_list.new_with(:type,l_type)
	_local l_top_xml << sw:simple_xml_thing.new(:join_details,l_elems,l_top_props)
	
	_if l_type _is :text
	_then l_elems.add( _self.text_join_xml( a_join_field ))
	      _return l_top_xml
	_endif

	l_elems.add( _self.result_tables_xml( a_join_field ))

	_local l_rope << rope.new()
	_local l_props << property_list.new()
	_local l_xml << sw:simple_xml_thing.new(l_type,l_rope,l_props)
		
	l_props[:heterogeneous] << a_join_field.heterogeneous?
	l_props[:simple_result] << a_join_field.simple_result?

	l_rope.add( _self.join_result_flavour( a_join_field ) )

	_local l_dd_join << a_join_field.joins(_true)
	_if l_dd_join _isnt _unset 
	_then l_rope.add( _self.dd_join_xml( l_dd_join ) )
	_endif

	l_elems.add(l_xml)
	
	>> l_top_xml

_endmethod
$

_pragma(classify_level=advanced, topic={dmdw,dm_doc_writer})
_method dm_xml_handler.dd_join_xml( a_dd_join )
	## 
	## 

	_local l_class_name << a_dd_join.class_name
	
	_local l_rope << rope.new()
	_local l_props << property_list.new_with(:name,a_dd_join.name)

	l_rope.add(_self.join_conditions_xml( a_dd_join ))
	
	_local l_xml << sw:simple_xml_thing.new( l_class_name, l_rope, l_props )
	
	>> l_xml
	
_endmethod
$

_pragma(classify_level=advanced, topic={dmdw,dm_doc_writer})
_method dm_xml_handler.join_conditions_xml( a_dd_join )
	## 
	## 

#	_if a_dd_join.heterogeneous? _is _true 
#	_then _return _self.hetero_join_conditions_xml( a_dd_join )
#	_endif
	
	_local l_rope << rope.new()
	_local l_xml << sw:simple_xml_thing.new(:conditions,l_rope)

	_for i_table_name _over a_dd_join.target_table_names.fast_elements()
	_loop

		_for i_cond _over a_dd_join.conditions( i_table_name,_true ).fast_elements()
		_loop
			_local l_prop << property_list.new_with(:target_table,i_table_name,
								:field1,i_cond[1].write_string,
								:operator,i_cond[2].write_string,
								:field2,i_cond[3].write_string)
			
			l_rope.add( sw:simple_xml_thing.new(:condition,{},l_prop) )
		_endloop
		
	_endloop
	
	>> l_xml
	
_endmethod
$

#_pragma(classify_level=advanced, topic={dmdw,dm_doc_writer})
#_method dm_xml_handler.hetero_join_conditions_xml( a_dd_hetero_join )
#	## 
#	##
#	
#	_local l_rope << rope.new()
#	_local l_props << property_list.new()
#	
#	_local l_xml << sw:simple_xml_thing.new(:conditions,l_rope,l_props)
#
#	>> l_xml
#_endmethod
#$


_pragma(classify_level=advanced, topic={dmdw,dm_doc_writer})
_method dm_xml_handler.join_result_flavour( a_fld )
	## 
	## 

	_local (l_type,l_ordered?) << a_fld.result_flavour
	_local l_rope << rope.new()

	l_rope.add( sw:simple_xml_thing.new(:result_type,l_type) )
	l_rope.add( sw:simple_xml_thing.new(:ordered,l_ordered?.default("").write_string) )
	
	>> sw:simple_xml_thing.new(:result_flavour,l_rope)
	
_endmethod
$

_pragma(classify_level=advanced, topic={dmdw,dm_doc_writer})
_method dm_xml_handler.result_tables_xml( a_fld )
	## 
	##
	
	_local l_rope << rope.new()
	_local l_xml << sw:simple_xml_thing.new(:result_tables,l_rope)

	_for i_table _over a_fld.result_tables.fast_elements()
	_loop
		_local l_atts << property_list.new()
		l_atts[:name] << i_table.name.write_string
		l_atts[:external_name] << i_table.external_name.write_string
		l_atts[:dataset] << i_table.dd.name.write_string
		l_rope.add( sw:simple_xml_thing.new(:table,{},l_atts) )
	_endloop

	>> l_xml
	
_endmethod
$


_pragma(classify_level=advanced, topic={dmdw,dm_doc_writer})
_method dm_xml_handler.super_dd_join_xml( p_fld )
	## 
	## 

	_local l_rope << rope.new()
	_local l_xml << sw:simple_xml_thing.new(:super_dd_join,l_rope)
	
	l_rope.add( _self.result_tables_xml( p_fld ))
	
	>> l_xml
	
_endmethod
$

_pragma(classify_level=advanced, topic={dmdw,dm_doc_writer})
_method dm_xml_handler.text_join_xml( p_fld )
	## 
	##

	_local l_rope << rope.new()
	_local l_xml << sw:simple_xml_thing.new(:text_join,l_rope)
	_local l_params << p_fld.parameters
	
	l_rope.add( sw:simple_xml_thing.new(:field_name,l_params[1].write_string) )
	l_rope.add( sw:simple_xml_thing.new(:text_table_name,l_params[2].write_string) )
	
	>> l_xml

_endmethod
$

_pragma(classify_level=advanced, topic={dmdw,dm_doc_writer})
#_private _method dm_xml_handler.geometry_field_xml( a_field )
_method dm_xml_handler.geometry_field_xml( a_field )
	## 
	##

	_local l_geom_type << a_field.geom_type
	_local l_elements << rope.new()
	_local l_props << property_list.new_with(:type,l_geom_type,
						 :has_topology,a_field.has_topology?)
	
	_local l_top << sw:simple_xml_thing.new( :geometry_details, l_elements, l_props)

	l_elements.add( sw:simple_xml_thing.new( :priority, a_field.priority.write_string ))

	
	_if (l_manifold << a_field.manifold_name) _isnt _unset
	_then

		_local l_xml << sw:simple_xml_thing.new(:inmanifold,{}, property_list.new_with(:name,l_manifold))
		l_elements.add(l_xml)
		
	_endif

	_if (mapped? << a_field.mapped?) _is _true
	_then
		
		_local l_atts << property_list.new_with(:map_discriminator_method,a_field.map_discriminator_method)
		_local l_flds << rope.new()
		
		_for i_key,i_fld _over a_field.mapped_geometry_fields.fast_keys_and_elements()
		_loop l_flds.add( sw:simple_xml_thing.new(:map,{},property_list.new_with(:key,i_key.write_string,
											 :fld_name,i_fld.name,
											 :fld_external_name,i_fld.external_name.write_string)))
		_endloop
		
		_local l_xml << sw:simple_xml_thing.new(:mapped,l_flds,l_atts)

		l_elements.add(l_xml)
		
		
	_elif (f << a_field.mapped_to_geom_field()) _isnt _unset
	_then
		
		_local l_atts << property_list.new_with(:name, write_string(f.name),
							:external_name, write_string(f.external_name))
		_local l_xml << sw:simple_xml_thing.new(:mapped_to, {}, l_atts)
		
		l_elements.add(l_xml)
		
	_endif

	>> l_top
	
_endmethod
$


_pragma(classify_level=advanced, topic={dmdw,dm_doc_writer})
_method dm_xml_handler.enumerators_xml( p_enumerators, p_include_urn? )
	## 
	## 

	_local l_rope << rope.new()
	_local l_enums_xml << sw:simple_xml_thing.new(:enumerators,l_rope)

	_for a_enu _over p_enumerators.fast_elements()
	_loop l_rope.add(_self.enumerator_xml(a_enu, p_include_urn?, _true))
	_endloop

	>> l_enums_xml
	
_endmethod
$

_pragma(classify_level=advanced, topic={dmdw,dm_doc_writer})
_method dm_xml_handler.enumerated_xml( a_enum )
	## 
	## 

	>> sw:simple_xml_thing.new(:enumerated,{},property_list.new_with(:name,a_enum.name.write_string))

_endmethod
$

_pragma(classify_level=advanced, topic={dmdw,dm_doc_writer})
_private _method dm_xml_handler.enumerator_xml(a_enum, p_include_urn?, p_include_values?)
	## 
	## 

	_local l_rope << rope.new()
	_local l_atts << property_list.new_with(:name, a_enum.name.write_string,
						:type, a_enum.type.write_string,
						:domain_class, a_enum.domain_class.write_string,
						:storage_class, a_enum.storage_class)

	_if p_include_urn? _is _true
	_then l_urn << _self.urn_prop_for(:enumerator, a_enum.definition_record)
	      l_atts.add_all(l_urn)
	_endif

	_if p_include_values?.default(_true) _is _true 
	_then
		_for i_val,i_str _over a_enum.values_and_strings.fast_keys_and_elements()
		_loop
			val << sw:simple_xml_thing.new(:value,{i_str.write_string},
						       property_list.new_with(:intvalue,i_val))
			l_rope.add(val)
		_endloop
	_endif
	
	>> sw:simple_xml_thing.new(:enumerator, l_rope, l_atts)

_endmethod
$

#######################################
## TOPOLOGY
#######################################


_pragma(classify_level=advanced, topic={dmdw,dm_doc_writer})
_method dm_xml_handler.default_topology_rules_xml( p_list )
	## 
	## 

	_local l_rope << rope.new()
	_local l_xml << sw:simple_xml_thing.new(:default_topology_rules,l_rope)

	_for i_mf,i_rules _over p_list.fast_keys_and_elements()
	_loop
		l_rope.add( _self.gen_rules_xml( i_mf, i_rules ) )
		
	_endloop

	>> l_xml
_endmethod
$

_pragma(classify_level=restricted, topic={dmdw,dm_doc_writer})
_private _method dm_xml_handler.gen_rules_xml(manifold_name,rules)
	##
	## Creates and returns a <manifold> element with :name
	## MANIFOLD_NAME and 
	##   <interaction> elements for every rule in RULES
	##
	## RULES should be a collection with the results from
	## gis_ds_view.manifold_rules_for(manifold_name,_true)
	##

	_local l_rope << rope.new()
	_local l_atts << property_list.new_with(:name,manifold_name)
	_local l_xml << sw:simple_xml_thing.new(:manifold,l_rope,l_atts)
	_for i_rule _over rules.fast_elements()
	_loop
		l_str1 << i_rule[2].write_string.substitute_string("default ","")
		l_str2 << i_rule[4].write_string.substitute_string("default ","")
		l_atts << property_list.new_with(:geomtype1,l_str1,
						 :geomtype2,l_str2)
		l_rules_xml << _self.rules_xml({i_rule[5],i_rule[6]})
		i_xml << sw:simple_xml_thing.new(:interaction,l_rules_xml,l_atts)
		l_rope.add(i_xml)
	_endloop
	>> l_xml
_endmethod
$


_pragma(classify_level=advanced, topic={dmdw,dm_doc_writer})
_method dm_xml_handler.explicit_topology_rules_xml(_optional p_elements)
	##
	## Top element. If given, P_ELEMENTS should be a vector or rope with
	## <manifold> elements
	##
	
	>> sw:simple_xml_thing.new(:explicit_topology_rules,p_elements.default(rope.new()))
	
_endmethod
$

_pragma(classify_level=advanced, topic={dmdw,dm_doc_writer})
_method dm_xml_handler.manifolds_xml(p_manifolds, p_include_urn?)
	## 
	## 

	_local l_elements << rope.new()
	_for i_mf_name,i_manifold _over p_manifolds.fast_keys_and_elements()
	_loop

		l_mf_xml << _self.manifold_xml(i_mf_name, i_manifold, p_include_urn?)
		l_elements.add(l_mf_xml)

	_endloop

	>> sw:simple_xml_thing.new(:manifold_definitions,l_elements)

_endmethod
$

_pragma(classify_level=advanced, topic={dmdw,dm_doc_writer})
_method dm_xml_handler.manifold_xml(p_mf_name, p_manifold, p_include_urn?)
	## 
	## Returns a <manifold> element.
	##
	
	_local l_atts << property_list.new_with(:name,p_mf_name)
	
	_if p_include_urn?
	_then l_urn << _self.urn_prop_for( :manifold, p_manifold )
	      l_atts.add_all(l_urn)
	_endif

	_local l_elems << rope.new()
	l_elems.add(sw:simple_xml_thing.new(:manifold_name,p_manifold.manifold_name.write_string))
	l_elems.add(sw:simple_xml_thing.new(:manifold_code,p_manifold.manifold_code.write_string))
	
	>> sw:simple_xml_thing.new(:manifold,l_elems,l_atts)
				   
_endmethod
$

_pragma(classify_level=advanced, topic={dmdw,dm_doc_writer})
_method dm_xml_handler.explicit_rules_manifold_xml(p_mf_name,p_manifold,p_tables)
	## 
	## Returns top <manifold> element with explicit rules from P_TABLES
	##
	
	_local l_atts << property_list.new_with(:name,p_mf_name,
						:manifold_name,p_manifold.manifold_name.write_string)
	>> sw:simple_xml_thing.new(:manifold,p_tables,l_atts)
				  
_endmethod
$

_pragma(classify_level=advanced, topic={dmdw,dm_doc_writer})
_method dm_xml_handler.topology_tables_and_interactions( p_flds )
	##
	## Creates and returns <collection1> elements.
	##
	## P_FLDS must be as is defined in:
	## dm_xml_writer.fields_with_manifold_interaction[a_manifold]
	##

	sorted << sorted_collection.new_from(p_flds.keys,_self.topology_field_sorter)
	tables << hash_table.new()
	sorted_tables << rope.new()
	
	#
	# First pass: create table_xml elements
	# 
	_for i_fld _over sorted.fast_elements()
	_loop

		l_table << i_fld.owner
		
		_if (tt_xml << tables[l_table]) _is _unset 
		_then
			tt_xml << tables[l_table] << _self.topology_collection1_xml(l_table)
			sorted_tables.add(tt_xml)
		_endif

		#
		# Get the interactions between I_FLD and the other fields
		l_interactions << p_flds[i_fld]
		l_elems << _self.topology_interaction_xml( i_fld, l_interactions )

		#
		# Create the field element with all interactions 
		l_fld_xml << _self.field1_name_xml(i_fld,l_elems)
		tt_xml.elements.add(l_fld_xml)
		
	_endloop

	>> sorted_tables

_endmethod
$

_pragma(classify_level=advanced, topic={dmdw,dm_doc_writer})
_method dm_xml_handler.topology_interaction_xml( fld, fld_interactions )
	## 
	## Returns a rope with collection2 xml elements:
	##
	##  <collection2>
	##    <field2>
	##      <rule1>
	##      <rule2>
	##    </field2>
	##  </collection2>
	##

	l_sorted << sorted_collection.new_from(fld_interactions.keys,_self.topology_field_sorter)
	
	l_rope << rope.new()

	_local l_cur_col << _unset 
	_for i_fld _over l_sorted.fast_elements()
	_loop
		
		_if (i_col << i_fld.owner.name) _isnt l_cur_col
		_then l_elem << _self.topology_collection2_xml(i_fld.owner)
		      l_rope.add(l_elem)
		      l_cur_col << i_col
		_endif

		_local l_inter << fld_interactions[i_fld]
		_local l_rules << l_inter[1]
		_local l_rule_type << l_inter[2]
		_local l_rules_xml << _self.rules_xml(l_rules)
		_local l_fld2 << _self.field2_name_xml(i_fld,l_rule_type,l_rules_xml)

		l_elem.elements.add(l_fld2)

	_endloop

	>> l_rope
_endmethod
$

_pragma(classify_level=advanced, topic={dmdw,dm_doc_writer})
_method dm_xml_handler.topology_collection1_xml( a_col )
	## 
	## return a <collection1> element for ds collection A_COL
	##

	_local l_atts << property_list.new_with(:name, a_col.name.write_string,
						:external_name, a_col.external_name.write_string)
	_local l_xml << sw:simple_xml_thing.new(:collection1,rope.new(),l_atts)

	>> l_xml
_endmethod
$

_pragma(classify_level=advanced, topic={dmdw,dm_doc_writer})
_method dm_xml_handler.topology_collection2_xml( a_col )
	## 
	## return a <collection1> element for ds collection A_COL
	##

	_local l_atts << property_list.new_with(:name, a_col.name.write_string,
						:external_name, a_col.external_name.write_string)
	_local l_xml << sw:simple_xml_thing.new(:collection2,rope.new(),l_atts)

	>> l_xml	
_endmethod
$

_pragma(classify_level=advanced, topic={dmdw,dm_doc_writer})
_method dm_xml_handler.field1_name_xml(p_fld, _optional p_elements)
	## 
	##

	l_atts << property_list.new_with(:name, p_fld.name.write_string,
					 :external_name, p_fld.external_name.write_string)
	>> sw:simple_xml_thing.new(:field1,p_elements.default(rope.new()),l_atts)

_endmethod
$

_pragma(classify_level=advanced, topic={dmdw,dm_doc_writer})
_method dm_xml_handler.field2_name_xml(p_fld, p_rule_type, _optional p_elements)
	## 
	##

	l_atts << property_list.new_with(:name, p_fld.name.write_string,
					 :external_name, p_fld.external_name.write_string,
					 :rule_type,p_rule_type)
	>> sw:simple_xml_thing.new(:field2,p_elements.default(rope.new()),l_atts)

_endmethod
$

_pragma(classify_level=advanced, topic={dmdw,dm_doc_writer})
_method dm_xml_handler.rules_xml( p_rules )
	## 
	## Returns a rope with <rule1> <rule2> elements:
	##
	##    <rule1>do_nothing</rule1>
	##    <rule2>do_nothing
	##

	l_rope << rope.new()
	
	_for i_rule_nr _over range(1,p_rules.size)
	_loop
		l_key << write_string("rule",i_rule_nr).as_symbol()
		l_value << write_string( p_rules[i_rule_nr] )
		l_elem << sw:simple_xml_thing.new(l_key,{l_value})
		l_rope.add(l_elem)
	_endloop

	>> l_rope

_endmethod
$

_pragma(classify_level=advanced, topic={dmdw,dm_doc_writer})
_method dm_xml_handler.list_from_xml(elements)
	## 
	## a helper that converts ELEMENTS into a property list
	## based on type
	
	_local l_prop << property_list.new()
	
	_try
		_for i_element _over elements.fast_elements()
		_loop l_prop[i_element.type] << i_element.elements.first
		_endloop
		
	_when error
		
	_endtry
	
	>> l_prop
	
_endmethod
$

_pragma(classify_level=advanced, topic={dmdw,dm_doc_writer})
_method dm_xml_handler.xml_from_list(p_tag,p_list)
	## 
	##

	a_rope << rope.new()
	
	_for i_key,i_value _over p_list.fast_keys_and_elements()
	_loop
		_if i_value.inherits_from?(externally_keyed_collection_mixin)
		_then 
			result << {_self.xml_from_list(i_key,i_value)}
		_else
			result << {i_value}
		_endif
		
		a_rope.add(sw:simple_xml_thing.new(i_key,result))

	_endloop

	l_xml << sw:simple_xml_thing.new(p_tag,a_rope)

	>> l_xml

_endmethod
$

_pragma(classify_level=advanced, topic={dmdw,dm_doc_writer})
_method dm_xml_handler.geometry_mappings_xml(list)
	## 
	##
	
	_local l_rope << rope.new()
	
	_for i_key,i_value _over list.fast_keys_and_elements()
	_loop 
	      l_rope.add(sw:simple_xml_thing.new(:method,{i_value},property_list.new_with(:name,i_key)))
	_endloop

	l_xml << sw:simple_xml_thing.new(:geometry_mappings,l_rope)
	>> l_xml
_endmethod
$

_pragma(classify_level=advanced, topic={dmdw,dm_doc_writer})
_method dm_xml_handler.common_field_descriptions_xml(p_list)
	##  
	## P_LIST is .updates[:commonfields]
	##
	## TODO: when it comes from an update.xml, we should pass it
	## without change!
	##

	_local l_grps_xml << rope.new()
	_for i_grp,i_list _over p_list.fast_keys_and_elements()
	_loop

		_local l_flds_xml << rope.new()
		_for i_name,i_props _over i_list.fast_keys_and_elements()
		_loop 
			a_xml << sw:simple_xml_thing.new(:field,{},i_props)
			l_flds_xml.add(a_xml)
		_endloop

		_local l_atts << property_list.new_with(:name,i_grp)
		_local l_grp_xml << sw:simple_xml_thing.new(:group,l_flds_xml,l_atts)
		l_grps_xml.add(l_grp_xml)
		
	_endloop

	_local l_xml << sw:simple_xml_thing.new(:commonfields,l_grps_xml)

	>> l_xml
_endmethod
$

_pragma(classify_level=advanced, topic={dmdw,dm_doc_writer})
_method dm_xml_handler.soft_joins_xml(list)
	## 
	## Creates from property list LIST a :soft_joins xml
	##

	_local l_rope << rope.new()
	
	_for i_key,i_value _over list.fast_keys_and_elements()
	_loop
		joins << rope.new()
		_for i_elem _over i_value.fast_elements()
		_loop
			joins.add(_self.xml_from_list(:soft_join,i_elem))
		_endloop
		
		l_rope.add(sw:simple_xml_thing.new(:soft_join_collection,joins,
						   property_list.new_with(:name,i_key)))
	_endloop

	l_xml << sw:simple_xml_thing.new(:soft_joins,l_rope)
	>> l_xml
	
_endmethod
$

_pragma(classify_level=advanced, topic={dmdw,dm_doc_writer})
_method dm_xml_handler.create_index_xml( p_fname, p_files )
	## 
	## Create a XML file with P_FNAME that contains elements from
	## P_FILES. 
	## All path information is stripped!
	## 
	## P_FILES should be a collection of vectors with two
	## elements:
	##  First the name of the xml file,
	##  Second the name of the html file.
	##
	## Output is an xml with the following elements:
	## 
	## <files>
	## 	<source>gis.xml</source>
	## 	<html>gis.html</html>
	##	<pretty>Gis</pretty>
	## </files>
	## ..
	##

	_local l_props << _self.xml_header_info.copy()
	l_props[:creation_date] << date_time.now()
	
	_local l_elements << rope.new()
	_local l_xml << sw:simple_xml_thing.new(:index, l_elements, l_props)
	
	_for i_elem _over p_files.fast_elements()
	_loop
		_local l_rope << rope.new()
		_local l_files << sw:simple_xml_thing.new(:files,l_rope)
		_local l_src_name << system.pathname_components(i_elem[1])
		_local l_html_name << system.pathname_components(i_elem[2])
		_local (l_name,ext) << system.split_filename(l_src_name)
		_local l_pretty << l_name.make_non_escape_string_pretty()
		l_rope.add( sw:simple_xml_thing.new(:source,l_src_name) )
		l_rope.add( sw:simple_xml_thing.new(:html,l_html_name) )
		l_rope.add( sw:simple_xml_thing.new(:pretty,l_pretty,property_list.new_with(:file,l_html_name)) )
		l_elements.add( l_files )
	_endloop

	>> l_xml
_endmethod
$
