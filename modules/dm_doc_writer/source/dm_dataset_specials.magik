#% text_encoding = iso8859_1
# ************************************************************
#
# (c) 2019 Realworld Software Products. All Rights Reserved.
#
# ************************************************************

_package sw

remex(:dm_dataset_specials)
$
_pragma(classify_level=advanced, topic={dmdw,dm_doc_writer})
##
## Use or subclass and pass the name of the class or an
## instantiated object by the property :dataset_specials to the
## writer
##
## :get_soft_joins() should return a property_list keyed on
## collection_name
##
def_slotted_exemplar(:dm_dataset_specials,
	{
		{:ds,_unset},
		{:soft_joins,_unset}
	})
$

_pragma(classify_level=restricted, topic={dmdw,dm_doc_writer})
dm_dataset_specials.define_slot_access(:ds,:read,:public)
$

_pragma(classify_level=restricted, topic={dmdw,dm_doc_writer})
dm_dataset_specials.define_slot_access(:soft_joins,:read,:public)
$

_pragma(classify_level=advanced, topic={dmdw,dm_doc_writer})
_method dm_dataset_specials.new(ds)
	## 
	## See class comment
	>> _clone.init(ds)
_endmethod
$

_pragma(classify_level=restricted, topic={dmdw,dm_doc_writer})
_method dm_dataset_specials.init(ds)
	## 
	##

	.ds << ds
	.soft_joins << _self.get_soft_joins()
	
	>> _self
_endmethod
$

_pragma(classify_level=restricted, topic={dmdw,dm_doc_writer})
_method dm_dataset_specials.verify(a_ds)
	## 
	##
	_if .ds _isnt a_ds
	_then condition.raise(:error,:string,write_string(
		"DS Specials error: Dataset ",.ds," does not match ",a_ds))
		
	_endif
	>> _self
_endmethod
$

_pragma(classify_level=basic, topic={dmdw,dm_doc_writer}, usage={redefinable, subclassable})
_method dm_dataset_specials.products_for_version
	## 
	## Should return a list of the names of sw_products to include
	## their version into the document. This implementation returns
	## an empty vector.
	>> {}
_endmethod
$

_pragma(classify_level=advanced, topic={dmdw,dm_doc_writer}, usage={redefinable, subclassable})
_method dm_dataset_specials.includes
	## 
	## This method should return one or more top xml collections to be
	## included in the XML output. This method returns an empty collection.
	##
	>> {}
_endmethod
$


_pragma(classify_level=basic, topic={dmdw,dm_doc_writer}, usage={redefinable, subclassable})
_method dm_dataset_specials.get_soft_joins()
	##
	## Returns a property_list, keyed on collection name with
	## properties and values for the soft joins, as is returned by
	## the ds_collection.record_exemplar.cs_soft_joins
	## This implementation returns an empty property list.
	##
	>> property_list.new()
_endmethod
$
