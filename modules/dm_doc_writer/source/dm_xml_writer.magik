#% text_encoding = iso8859_1
# ************************************************************
#
# (c) 2019 Realworld Software Products. All Rights Reserved.
#
# ************************************************************

_package sw

remex(:dm_xml_writer)
$

_pragma(classify_level=basic, topic={dmdw,dm_doc_writer},usage={internal})
##
## Dumps the datamodel for a dataset in xml
## Must be instantiated by new()
## The export is started with process()
## 
def_slotted_exemplar(:dm_xml_writer,
	{
		{:ds,_unset},
		{:properties,_unset},
		{:out_file,_unset},
		{:visible_fields,_unset},
		{:enumerators,_unset},
		{:collection_xml,_unset},
		{:ace_list,_unset},
		{:categories,_unset},
		{:exported_collections,_unset},
		{:manifolds,_unset},
		{:fields_by_manifold,_unset},
		{:fields_with_manifold_interaction,_unset},
		{:topology_interactions,_unset},
		{:dataset_specials,_unset},
		{:updates,_unset},
		{:status,_unset}
	}
)
$
_pragma(classify_level=restricted, topic={dmdw,dm_doc_writer},usage={internal})
##
## When updates are processed, they are stored internally in
## this slot.
## It contains:
##
## a property_list with the following keys and values:
##
##   :commonfields        property_list(:<group_name>,
##                            property_list(<:field_name>,
##                                property_list(:name,<field_name>
##                                              :external_name,"",
##                                              :description,"")))
##
##   :geometry_mappings   property_list(<:method_name>,"description",
##                                      ...)
##   :collections         rope with property_lists with the
##                        following keys and values:
##
##                        property_list(:collection,<:name>,
##                                      :fields,<plist>
##                                      :description,"description")
##
##                        <plist> is a property_list with:
##                           property_list(<:field_name>,"description",
##                                         ...)
## 
dm_xml_writer.define_slot_access(:updates,:read,:public)
$

_pragma(classify_level=basic, topic={dmdw,dm_doc_writer},usage={internal})
## Set to :initialized or :export_done
dm_xml_writer.define_slot_access(:status,:read,:public)
$

_pragma(classify_level=basic, topic={dmdw,dm_doc_writer},usage={internal})
## The schema version that is supported
dm_xml_writer.define_shared_constant(:schema_version_main,"2.0",:public)
$

_pragma(classify_level=basic, topic={dmdw,dm_doc_writer},usage={internal})
## The schema version that is supported for updates
dm_xml_writer.define_shared_constant(:schema_version_updates,"1.4",:public)
$

_pragma(classify_level=basic, topic={dmdw,dm_doc_writer},usage={internal})
_method dm_xml_writer.new(ds, properties)
	##
	## DS - The databse view to be reported
	## PROPERTIES - A property_list with the following keys
	##     :ace_name    - name of ACE to be used for categories and order of
	##                    collections
	##     :output_file - full path for the output xml file 
	##
	##     The following properties are optional:
	##     :update_file - file pathname of xml with updates
	##     :dm_product_name  - name of sw_product for datamodel version
	##     :dm_module_name - name of sw_module for datamodel version
	##     :dm_predicate - a predicate 
	##     :dataset_specials (a class as dm_dataset_specials)
	##     :products_for_version - collection of product names for which
	##                             a version should be written.
	##     :expand_tables? - If true (default), intermediate join
	##                       tables are exported too if not in the set
	##     :include_urns? - If true (default false), it will
	##                      include urns for
	##     :case - Its value should be unset or the name of the soc
	##        to open a case database for svg output
	##
	## On instantiation it will gather data.
	##
	>> _clone.init(ds, properties )
_endmethod
$

_pragma(classify_level=restricted, topic={dmdw,dm_doc_writer},usage={internal})
_method dm_xml_writer.init(ds, properties)
	## 
	##

	.ds << ds

	.properties << properties
	_if .properties[:expand_tables?] _is _unset 
	_then .properties[:expand_tables?] << _true 
	_endif
	_if .properties[:include_urns?] _is _unset 
	_then .properties[:include_urns?] << _false
	_endif
	
	.out_file << _if (file << properties[:output_file]) _is _unset 
		     _then condition.raise(:error,:string,":output_file should be specified")
		     _elif _not system.file_creatable?(file)
		     _then condition.raise(:error,:string,write_string("Output file ",file," could not be created"))
		     _else >> file
		     _endif
	
	write("Output file: ",.out_file)

	_if (l_ace << _self.ace( properties[:ace_name])) _is _unset 
	_then
		condition.raise(:error,:string,write_string("No such ace: '",properties[:ace_name],%'))
	_else 
		write("Ace to use: ",l_ace)
	_endif
	
	.categories << rope.new()
	.enumerators << equality_property_list.new()
	.exported_collections << equality_set.new()
	.collection_xml << _unset
	
	_self.init_manifolds()
	
	_self.read_updates()

	_self.init_dataset_specials()

	.status << :initialized
	
	>> _self

_endmethod
$

_pragma(classify_level=basic, topic={dmdw,dm_doc_writer},usage={internal})
_method dm_xml_writer.expand_tables?
	## 
	## Ask the properties
	##
	>> (l_p<<.properties) _isnt _unset _andif
		l_p[:expand_tables?].default(_true) _is _true 
_endmethod
$

_pragma(classify_level=restricted, topic={dmdw,dm_doc_writer},usage={internal})
_method dm_xml_writer.ofile_name
	## 
	## 
	>> .ds.dm_xml_filename
_endmethod
$

_pragma(classify_level=restricted, topic={dmdw,dm_doc_writer},usage={internal})
_method dm_xml_writer.default_output_file()
	## 
	## 

	l_mod << sw_module_manager.module(_self.module_name.default(:dm_doc_writer))
	l_dir << l_mod.resource_list_for(:data).an_element()
	l_name << system.pathname_from_components(_self.ofile_name,l_dir)
	
	>> l_name
_endmethod
$

_pragma(classify_level=restricted, topic={dmdw,dm_doc_writer},usage={internal})
_method dm_xml_writer.include_urns?
	## 
	## 
	>> .properties[:include_urns?] _is _true 
_endmethod
$

_pragma(classify_level=restricted, topic={dmdw,dm_doc_writer},usage={internal})
_private _method dm_xml_writer.init_dataset_specials()
	## 
	## .properties[:dataset_specials]
	##
	## If <value> is _unset : dm_dataset_specials.new()
	## If <value> is a symbol: !current_package![<value>].new()
	## If <value> is_kind_of?(dm_dataset_specials) use it
	##

	write("Initialising dataset specials...")

	_try _with p_cond
		
		_if (sp << .properties[:dataset_specials]) _isnt _unset _andif
		    (sp.is_kind_of?(:symbol)) _andif
		    (ob << !current_package![sp]) _isnt _unset
		_then .dataset_specials << ob.new(.ds)
		      write("Created ",.dataset_specials)
		_elif sp.is_kind_of?(dm_dataset_specials)
		_then .dataset_specials << sp.verify(.ds)
		_endif

		_if .dataset_specials _is _unset 
		_then .dataset_specials << dm_dataset_specials.new(.ds)
		_endif
		
	_when error
		write("Creation of dataset specials failed ",p_cond.report_contents_string)
		.dataset_specials << dm_dataset_specials.new(.ds)
	_endtry

	write("Dataset specials ",.dataset_specials)
	>> .dataset_specials
	
_endmethod
$

_pragma(classify_level=restricted, topic={dmdw,dm_doc_writer},usage={internal})
_method dm_xml_writer.init_manifolds()
	## 
	## Populates .manifolds, .fields_by_manifold and
	## .fields_with_manifold_interaction
	##

	write("Init manifolds...")
	
	.manifolds << property_list.new()
	.fields_by_manifold << property_list.new()
	
	_for code,name _over .ds.manifolds()
	_loop .manifolds[name] << manifold.new(.ds,code)
	      .fields_by_manifold[name] << .ds.all_fields_using_manifold(name)
	_endloop

	.fields_with_manifold_interaction << _self.full_topology_table()

	>> _true
	
_endmethod
$


_pragma(classify_level=basic, topic={dmdw,dm_doc_writer},usage={internal})
_method dm_xml_writer.process()
	## 
	## Writes all xml elements to .out_file in the following order:
	##
	## 0. Datamodel and software details
	## 1. Categories & collections
	## 2. Enumerators
	## 3. Topology
	## 

	write("Exporting...")
	
	.exported_collections.empty()

	_self.process_categories_and_collections()

	_self.process_enumerators()

	_self.process_manifolds()
	
	_self.process_topology()

	_self.write_to( .out_file )

	.status << :export_done

	_self.post_process()
	
_endmethod
$

_pragma(classify_level=restricted, topic={dmdw,dm_doc_writer},usage={internal})
_method dm_xml_writer.software_version()
	## 
	## #1 Core
	## #2 This Module
	
	_local l_list << property_list.new()
	
	_for i _over {:sw_core,:datamodel_doc_writer}.fast_elements()
	_loop
		#DEBUG write(i)
		l_list[i] << smallworld_product.product(i).version.write_string
	_endloop

	_local l_in << .dataset_specials.products_for_version
	_for i _over l_in.fast_elements()
	_loop
		_try _with p_cond
			l_list[i] << smallworld_product.product(i).version.write_string

		_when error 
			write(p_cond.report_contents_string)
		_endtry
	_endloop

	>> dm_xml_handler.xml_from_list(:software_version,l_list)
	
_endmethod
$

_pragma(classify_level=restricted, topic={dmdw,dm_doc_writer},usage={internal})
_private _method dm_xml_writer.ace( _optional ace_name )
	## 
	## returns the ase record with name ACE_NAME. When ACE_NAME
	## isnt given, it uses the value of .properties[:ace_name]
	##

	ace_name << ace_name.default(.properties[:ace_name])
	acv << gis_program_manager.ace_view
	col << acv.collection(:sw_gis!ace)
	pred << predicate.eq(:name,ace_name)
	ace << col.select(pred).an_element()
	
	>> ace
_endmethod
$

_pragma(classify_level=restricted, topic={dmdw,dm_doc_writer},usage={internal})
_private _method dm_xml_writer.categories_from_ace( ace_name )
	## 
	## returns an equality_property_list keyed on Category with a
	## rope containing internal names of collections in the
	## category
	##
	## When _self.include_urns? is true, it also returns the
	## dataset_rwo_record's for the categories
	##
	
	_local ace << _self.ace( ace_name )
	_local ds_name << .ds.name
	
	_local l_catrecs << equality_property_list.new()
	_local list << equality_property_list.new()
	_for i_rec _over ace.dataset_rwo_entries_for(ds_name)
	_loop
		_if i_rec.type _is 1
		_then
			_local l_name << i_rec.name.write_string
			cat << list[l_name] << rope.new()
			_if _self.include_urns? _is _true
			_then l_catrecs[l_name] << i_rec
			_endif
		_else
			cat.add(i_rec.name.as_symbol())
		_endif
	_endloop
	
	>> list,l_catrecs
_endmethod
$

#_pragma(classify_level=restricted, topic={dmdw,dm_doc_writer},usage={internal})
#_method dm_xml_writer.read_updates()
#	## 
#	## reads updates and stores them in .updates
#	##
#
#	.updates << property_list.new()
#	
#	_if (l_str << .properties[:update_file]) _isnt _unset
#	_then
#		_if _not system.file_exists?(l_str)
#		_then write(" Configured file with updates not found ",l_str)
#		      _return 
#		_endif
#	_else
#		write("No updates are configured ")
#		_return 
#	_endif
#	
#	list << property_list.new()
#	
#	l_file << l_str
#	l_xml << simple_xml.read_element_file(l_file)
#	
#	_if l_xml.type = :datamodel _andif
#	    (l_c << l_xml.xml_elements.first).type = :collections
#	_then
#		
#		l_col_updates << list[:collection_updates] << property_list.new()
#		
#		_for i _over l_c.xml_elements.fast_elements()
#		_loop
#			atts << i.attributes
#			col_name << atts["name"].as_symbol()
#			
#			_if .ds.collections[col_name] _is _unset 
#			_then write("Warning - No collection with name ",col_name)
#			      _continue 
#			_endif
#			
#			#DEBUG write("Processing update name ",col_name)
#			l_col_update << rope.new()
#			
#			_try _with p_cond
#				
#				_for i2 _over i.elements.fast_elements()
#				_loop
#					l_col_update.add(i2)
#				_endloop
#
#				write(" Reading update for: ",col_name," (",l_col_update.size,%))
#				l_col_updates[col_name] << l_col_update
#				
#			_when error
#				write("Element ",col_name," could not be processed ",p_cond.report_contents_string)
#			_endtry
#			
#		_endloop
#	_endif
#
#	.updates << list
#	>> list
#	
#_endmethod
#$

_pragma(classify_level=restricted, topic={dmdw,dm_doc_writer},usage={internal})
_method dm_xml_writer.datamodel_xml()
	## 
	## Create the top element
	##
	
	>> dm_xml_handler.datamodel_xml( .ds, .properties)

_endmethod
$

_pragma(classify_level=restricted, topic={dmdw,dm_doc_writer},usage={internal})
_method dm_xml_writer.write_to( file )
	## 
	##

	l_datamodel << _self.datamodel_xml()
	
	l_objects << l_datamodel.elements

	l_objects.add( dm_xml_handler.datamodel_history_xml( .ds , .properties) )

	l_objects.add( _self.software_version() )
	l_objects.add( _self.global_properties_xml())

	l_objects.add_all_last(.categories)

	l_objects.add(.enumerators)
	
	l_objects.add(.topology_interactions)

	l_objects.add_all_last( _self.dataset_special_includes)
	
	simple_xml.write_element_file( file, l_datamodel )

	write("Dataset ",.ds," written to ", file)
	
_endmethod
$

_pragma(classify_level=restricted, topic={dmdw,dm_doc_writer},usage={internal})
_method dm_xml_writer.process_categories_and_collections()
	## 
	##

	_local l_ace_name << .properties[:ace_name]
	(.ace_list,l_catrecs) << _self.categories_from_ace(l_ace_name)

	_local l_cats << rope.new()
	_local l_exported_cols << rope.new()
	
	_for i_key,i_cols _over .ace_list.fast_keys_and_elements()
	_loop
		
		l_cols << rope.new()

		_for i_colname _over i_cols.fast_elements()
		_loop
			i_col << .ds.collections[i_colname]
			_if i_col.skip_dm_export? _is _true 
			_then
				write(i_col," skipped ")
				_continue 
			_endif
			l_xml << _self.process_collection( i_col, i_key )
			l_cols.add( l_xml )
			l_exported_cols.add( i_col.descriptor )
		_endloop

		_local l_key << _if _self.include_urns?
				_then >> l_catrecs[i_key]
				_else >> i_key
				_endif
		
		l_cats.add(dm_xml_handler.category_xml(l_cols, l_key, _self.include_urns?))
		
	_endloop

	# Now check if we are complete
	_local l_misses << sorted_collection.new(_unset,
						 _proc @col(a,b)
							 >> a.attributes[:name] _cf
								 b.attributes[:name]
						 _endproc)
	_for i_col _over .ds.collections.fast_elements()
	_loop
		_if i_col.skip_dm_export? _is _false _andif
		    _not _self.ace_contains_col?( i_col )
		_then
			#DEBUG write(i_col,"  not in ace")
			l_exported_cols.add( i_col.descriptor )
			l_xml << _self.process_collection( i_col, :not_in_ace)
			l_misses.add( l_xml )
		_endif
	_endloop
	
	_if l_misses.size > 0
	_then
		l_catname << write_string("Not in ACE '",l_ace_name,%')
		l_cat << dm_xml_handler.category_xml( l_misses, l_catname, _false)		
		l_cats.add(l_cat)
	_endif

	_if _self.expand_tables?
	_then
		# Check for intermediate join collections
		_local l_table_list << _self.expand_tables(l_exported_cols)
		_if l_table_list.size > 0
		_then
			l_xmls << rope.new()
			_for i_table _over l_table_list.fast_elements()
			_loop
				#DEBUG write("Expand collections with ",i_table)
				l_xmls.add(_self.process_collection( i_table, :expanded))
			_endloop
			
			l_cat << dm_xml_handler.category_xml(l_xmls,"Expanded join tables",_false)
			l_cats.add(l_cat)
		_endif
	_endif

	.categories << l_cats
	
	>> l_cats

_endmethod
$

_pragma(classify_level=restricted, topic={dmdw,dm_doc_writer},usage={internal})
_method dm_xml_writer.expand_tables(p_exported)
	## 
	## P_EXPORTED is a collection of dd_tables that are exported. This
	## method search for intermediate tables to be exported when
	## they are not yet in P_EXPORTED and returns those tables in a
	## keyed_set
	##

	_local l_set << keyed_set.new()
	
	_for i_table _over p_exported.fast_elements()
	_loop 
		_for i_jf _over i_table.all_joins()
		_loop
			
			_local l_tables << i_jf.target_tables
			_for i_ttable _over l_tables.fast_elements()
			_loop
				_if _not p_exported.includes?(i_ttable)
				_then l_set.add(i_ttable)
				_endif

			_endloop
		_endloop
	_endloop

	>> l_set
	
_endmethod
$

_pragma(classify_level=restricted, topic={dmdw,dm_doc_writer},usage={internal})
_method dm_xml_writer.process_collection( col, category )
	## 
	##

#	write("Processing ",col, " category: ",category)

	l_properties << property_list.new_with(:category,category)

	updates << _self.updates_for(col)
	_if updates _isnt _unset 
	_then l_properties.add_all(updates)
	_endif
	
	.visible_fields << col.visible_fields
	.collection_xml << dm_xml_handler.collection_xml( col, l_properties, _self.include_urns?)
	
	l_flds << _self.process_fields( col )

	.exported_collections.add( col )

	>> .collection_xml
_endmethod
$

_pragma(classify_level=restricted, topic={dmdw,dm_doc_writer},usage={internal})
_method dm_xml_writer.process_fields( col )
	## 
	## 

	_for i_fld _over col.all_fields_ordered.fast_elements()
	_loop
		_self.process_field( i_fld )
	_endloop
	
_endmethod
$

_pragma(classify_level=restricted, topic={dmdw,dm_doc_writer},usage={internal})
_method dm_xml_writer.process_field( fld )
	## 
	## 

	properties << property_list.new()
	properties[:visible] << .visible_fields.includes?( fld )

	updates << _self.updates_for( fld )
	_if updates _isnt _unset 
	_then properties.add_all(updates)
	_endif
	
	(l_xml,l_main_type) << dm_xml_handler.field_xml(fld, properties, _self.include_urns?)
	.collection_xml.elements.add(l_xml)

_endmethod
$

_pragma(classify_level=restricted, topic={dmdw,dm_doc_writer},usage={internal})
_method dm_xml_writer.process_enumerators()
	## 
	##

	_local l_source << .ds.dd_enumerators(_true)
	.enumerators << dm_xml_handler.enumerators_xml(l_source, _self.include_urns?)

	>> .enumerators

_endmethod
$

_pragma(classify_level=restricted, topic={dmdw,dm_doc_writer},usage={internal})
_method dm_xml_writer.process_manifolds()
	## 
	## 
	
_endmethod
$

_pragma(classify_level=restricted, topic={dmdw,dm_doc_writer},usage={internal})
_method dm_xml_writer.process_topology()
	## 
	## populates .topology_interactions
	##

	
	_local l_elements << rope.new()
	.topology_interactions << dm_xml_handler.explicit_topology_rules_xml(l_elements)

	_for i_mf_name,i_manifold _over .manifolds.fast_keys_and_elements()
	_loop

		l_tables << dm_xml_handler.topology_tables_and_interactions(
				    .fields_with_manifold_interaction[i_mf_name])
		
		l_mf_xml << dm_xml_handler.explicit_rules_manifold_xml(i_mf_name,i_manifold,l_tables)
		l_elements.add(l_mf_xml)

	_endloop

	>> .topology_interactions
	
_endmethod
$

_pragma(classify_level=restricted, topic={dmdw,dm_doc_writer},usage={internal})
_method dm_xml_writer.ace_contains_col?( p_col )
	## 
	##
	
	_local l_name << p_col.name
	_for i,list _over .ace_list.fast_keys_and_elements()
	_loop _if list.includes?(l_name)
	      _then _return _true 
	      _endif
	_endloop

	>> _false 

_endmethod
$

_pragma(classify_level=restricted, topic={dmdw,dm_doc_writer},usage={internal})
_method dm_xml_writer.updates_for( obj )
	## 
	## This method returns an update for OBJ, which may be a
	## dd_table or ds_collection or a dd_basic_field
	##

	_if .updates _is _unset _orif
	    (l_colupdates << .updates[:collections]) _is _unset
	_then _return
	_endif

	_local l_results
	
	_if obj.class_name _is :ds_collection 
	_then
		
		_local l_col_name << obj.name
		
		_local l_updates
		_for i_colupdate _over l_colupdates.fast_elements()
		_loop _if i_colupdate[:collection] _is l_col_name
		      _then l_updates << i_colupdate
			    _leave
		      _endif
		_endloop

		_if l_updates _isnt _unset 
		_then l_results << property_list.new_with(:description,l_updates[:description])
		_endif
		
	_elif obj.inherits_from?(dd_basic_field) 
	_then

		_local l_col_name << obj.owner.name
		_local l_fld_name << obj.name

		_local l_description
		_for i_colupdate _over l_colupdates.fast_elements()
		_loop @outer
			_if i_colupdate[:collection] = l_col_name
			_then _for i_fldname,i_description _over i_colupdate[:fields].fast_keys_and_elements()
			      _loop _if i_fldname _is l_fld_name
				    _then l_description << i_description
					  _leave @outer
				    _endif
			      _endloop
			_endif
		_endloop

		_if l_description _isnt _unset 
		_then l_results << property_list.new_with(:description,l_description)
		_endif
		
	_else
		write(" Warning - Updates for ",obj," not (yet) supported")
	_endif

	_if l_results _isnt _unset 
	_then
		#DEBUG write("Found update for ",obj,": '",l_results[:description],%')
	_endif
	
	>> l_results
_endmethod
$

_pragma(classify_level=restricted, topic={dmdw,dm_doc_writer},usage={internal})
_private _method dm_xml_writer.updates_for_collection( col , updates )
	## 
	## 

	results << rope.new()

	_for i_elem _over updates.elements()
	_loop _if i_elem.type _isnt :field
	      _then results.add(i_elem)
	      _endif
	_endloop
	write(" Update(s) found for ",col, " ",results)

	>> results
	
_endmethod
$


_pragma(classify_level=restricted, topic={dmdw,dm_doc_writer},usage={internal})
_method dm_xml_writer.full_topology_table()
	## 
	## Returns a list keyed on geometry field containing a hash_table
	## with geometry fields and interactions
	##
	
	_local l_list_by_man << property_list.new()
	
	_for i_name,i_manifold _over .manifolds.fast_keys_and_elements()
	_loop

		l_list << l_list_by_man[i_name] << hash_table.new()
		
		_local gfields << .fields_by_manifold[i_name]

		_for i_field _over gfields.fast_elements()
		_loop
			l_rules << _self.manifold_rules_for(i_field,i_name)
			_if _not l_rules.empty?
			_then l_list[i_field] << l_rules
			_endif
		_endloop

	_endloop

	>> l_list_by_man
_endmethod
$

_pragma(classify_level=restricted, topic={dmdw,dm_doc_writer},usage={internal})
_method dm_xml_writer.manifold_rules_for(a_fld, manifold_name)
	## 
	## Returns a list keyed on geometry_field containig the rules
	## set. Do nothing is ignored.
	##
	
	_local mf << .manifolds[manifold_name]
	_local gfields << .fields_by_manifold[manifold_name]
	_local list << hash_table.new()
	_for i_gfield _over gfields.fast_elements()
	_loop
		
#		write(_self,".manifold_rules_for(",a_fld,%,,i_gfield)
		
		_try _with cond
#			(a,b) << mf.get_rules_for_geom_pair(a_fld,i_gfield)
			# Using a deprecated method instead to get the type for now. A more
			# permanent solution is needed.
			(l_rules,l_type) << mf.topo_engine.get_rules_for_geom_pair(a_fld,i_gfield)
#DEBUG write(a_fld,i_gfield,l_rules[1],l_rules[2],l_type)			
			_if l_rules[1] _is :do_nothing _and l_rules[2] _is :do_nothing
			_then _continue 
			_endif
			list[i_gfield] << {l_rules,l_type}
		_when error
			#write(i_gfield," - manifold_rules_for Error ",cond.report_contents_string)
		_endtry
		
	_endloop

	>> list
_endmethod
$

_pragma(classify_level=restricted, topic={dmdw,dm_doc_writer},usage={internal})
_method dm_xml_writer.default_manifold_rules(manifold_name)
	## 
	## Returns a vector with the :system rules for manifold
	## MANIFOLD_NAME
	##
	
	_local l_result << rope.new()
	_for i_vec _over .ds.manifold_rules_for(manifold_name,_true)
	_loop _if i_vec[1] _is :system
	      _then l_result.add(i_vec)
	      _endif
	_endloop

	>> l_result 
	
_endmethod
$

_pragma(classify_level=basic, topic={dmdw,dm_doc_writer})
_method dm_xml_writer.global_properties_xml()
	## 
	## converts _self.global_field_descriptions,
	## default_manifold_rules etc. to a xml
	##

	a_rope << rope.new()

	a_rope.add(_self.manifolds_xml())
	
	a_rope.add(_self.default_topology_rules_xml())

	a_rope.add(_self.global_field_descriptions_xml())

	a_rope.add(_self.geometry_mappings_xml())
	
	a_result << dm_xml_handler.global_properties_xml(a_rope)

	>> a_result
_endmethod
$

_pragma(classify_level=basic, topic={dmdw,dm_doc_writer})
_method dm_xml_writer.manifolds_xml()
	## 
	## 
	>> dm_xml_handler.manifolds_xml(.manifolds, _self.include_urns?)
_endmethod
$

_pragma(classify_level=restricted, topic={dmdw,dm_doc_writer})
_method dm_xml_writer.default_topology_rules_xml()
	## 
	## Returns the xml element for the default topology rules
	##
	>> dm_xml_handler.default_topology_rules_xml( _self.default_topology_rules)
_endmethod
$

_pragma(classify_level=restricted, topic={dmdw,dm_doc_writer})
_private _method dm_xml_writer.default_topology_rules
	## 
	## returns a proplist with the default rules for every manifold
	## in .manifolds
	##

	l_list << property_list.new()
	_for i_name _over .manifolds.keys.fast_elements()
	_loop  l_list[i_name] << _self.default_manifold_rules(i_name)
	_endloop

	>> l_list
	
_endmethod
$

_pragma(classify_level=restricted, topic={dmdw,dm_doc_writer})
_method dm_xml_writer.global_field_descriptions_xml()
	## 
	## get data from .updates or .dataset_specials and return a :commonfields
	## xml
	##
	
	_local l_list << .updates[:commonfields]
	_if l_list _isnt _unset 
	_then _return dm_xml_handler.common_field_descriptions_xml(l_list)
	_endif

	l_list << .dataset_specials.global_field_descriptions
	_if l_list _isnt _unset 
	_then _return dm_xml_handler.common_field_descriptions_xml(l_list)
	_endif

_endmethod
$

_pragma(classify_level=restricted, topic={dmdw,dm_doc_writer})
_method dm_xml_writer.geometry_mappings_xml()
	## 
	## Get from .updates or .dataset_specials and return :geometry_mappings xml
	## or when not defined an empty rope
	## 

	_local l_list << .updates[:geometry_mappings]
	_if l_list _isnt _unset 
	_then _return dm_xml_handler.geometry_mappings_xml(l_list)
	_endif
	
	>> _if (l_maps << .dataset_specials.geometry_mappings).is_kind_of?(property_list)
	   _then >> dm_xml_handler.geometry_mappings_xml(l_maps)
	   _else >> rope.new()
	   _endif
	
_endmethod
$

_pragma(classify_level=restricted, topic={dmdw,dm_doc_writer})
_method dm_xml_writer.dataset_special_includes
	## 
	##
	_if (in << .dataset_specials.includes).size = 0
	_then
		write("Nothing is included from ",.dataset_specials)
	_else
		write("Included from ",.dataset_specials," :")
		_for i_elem _over in.fast_elements()
		_loop write(i_elem)
		_endloop
	_endif
	>> in
_endmethod
$

###
### UPDATES
###


_pragma(classify_level=restricted, topic={dmdw,dm_doc_writer},usage={internal})
_method dm_xml_writer.read_updates(_optional p_filename)
	## 
	## reads updates, store them in .updates and return it.
	## If P_FILENAME is unset, use .properties[:update_file]
	##
	
	_local l_list << .updates << property_list.new_with(:commonfields,_unset,
							    :geometry_mappings,_unset,
							    :collections,rope.new())
	
	_if (l_file << p_filename) _isnt _unset _orif
	    (l_file << .properties[:update_file]) _isnt _unset 
	_then
		_if _not system.file_exists?(l_file)
		_then
			condition.raise(:warning,:string,
					write_string("Configured file with updates not found ",l_file))
			_return .updates
		_endif
	_else
		write("No updates are configured ")
		_return .updates
	_endif
	
	write("Processing updates from ",l_file)
	_local l_xml << simple_xml.read_element_file(l_file)

	_local l_schema_version << _self.schema_version_updates

	_if (l_sver << l_xml.attribute(:schema_version)) ~= l_schema_version
	_then condition.raise(:warning,:string,write_string("Updates - Different schema version: supports: ",
							    %',l_schema_version,%',", found: ",
							    %',l_sver,%'))
	_endif

	_if l_xml.type ~= :datamodel
	_then
		condition.raise(:warning,:string,
				write_string("Updates - Expected first element :datamodel, found ",l_xml))
		_return .updates
	_endif

	_for i_elem _over l_xml.xml_elements()
	_loop
		_if {:global_properties,:category}.includes?(i_elem.type)
		_then _self.handle_update_xml(i_elem)
		_else condition.raise(:warning,:string,
				      write_string("Updates - XML Type ",i_elem," cannot be processed as update"))
		_endif
	_endloop
	
	>> .updates
	
_endmethod
$

_pragma(classify_level=restricted, topic={dmdw,dm_doc_writer},usage={internal})
_private _method dm_xml_writer.handle_update_xml(a_xml)
	## 
	## Handles the elements in datamodel (global_properties, category/collection)
	##
	
	_if a_xml.type = :global_properties
	_then
		_for i_sub _over a_xml.xml_elements()
		_loop
			#DEBUG write("Processing ",i_sub)
			_if i_sub.type = :commonfields
			_then
				.updates[:commonfields] << _self.handle_updates_for_commonfields(i_sub)
				
			_elif i_sub.type = :geometry_mappings
			_then
				.updates[:geometry_mappings] << _self.handle_updates_for_geometry_mappings(i_sub)
			_else
				condition.raise(:warning,:string,write_string("Unknown global_property ",i_sub))
			_endif
		_endloop
	_endif

	_if a_xml.type ~= :category
	_then _return 
	_endif

	_for i_elem _over a_xml.xml_elements()
	_loop
		
		_if i_elem.type ~= :collection
		_then
			condition.raise(:warning,:string,write_string("Unknown category sub ",i_elem))
			_continue 
		_endif
		_local l_name << i_elem.xml_attributes[:name]

		.updates[:collections].add(_self.handle_updates_for_col(l_name,i_elem))
		
	_endloop
	
_endmethod
$

_pragma(classify_level=restricted, topic={dmdw,dm_doc_writer},usage={internal})
_private _method dm_xml_writer.handle_updates_for_col(p_name,a_xml)
	##
	## Process elements suitable for collections.
	##
	## p_name: a string with internal name of collection
	## a_xml Should be of type :collection
	##


	_local l_list << property_list.new_with(:collection,p_name.as_symbol(),
						:fields,property_list.new())

	_if (l_col << .ds.collections[p_name.as_symbol()]) _is _unset 
	_then condition.raise(:warning,:string,write_string("Warning Update - No collection with name ",p_name))
	      _return l_list
	_endif

	write("Processing collection updates for ",l_col)
	_for i_elem _over a_xml.xml_elements()
	_loop
		_if (type << i_elem.type) _is :description
		_then
			l_list[:description] << i_elem.get_element_contents()
			
		_elif type _is :field
		_then
			_local l_pairs << property_list.new()
			_for j_elem _over i_elem.xml_elements()
			_loop l_pairs[j_elem.type] << j_elem.get_element_contents()
			_endloop
			_if (l_name << l_pairs[:name]) _isnt _unset 
			_then l_list[:fields][l_name.as_symbol()] << l_pairs[:description]
			_endif
		_endif
		
	_endloop

#	print(l_list)
#	print(l_list[:fields])
	
	>> l_list
_endmethod
$

_pragma(classify_level=restricted, topic={dmdw,dm_doc_writer},usage={internal})
_private _method dm_xml_writer.handle_updates_for_commonfields(a_xml)
	## 
	##
	
	#DEBUG write("Processing updates for ",a_xml)
	_local l_grp_list << property_list.new()
	_for i_grp _over a_xml.xml_elements()
	_loop
		_local l_list << property_list.new()
		l_grp_list[i_grp.attribute(:name)] << l_list
		
		_for i_elem _over i_grp.xml_elements()
		_loop
			_local l_pairs << property_list.new()
			_if i_elem.type ~= :field
			_then condition.raise(:warning,:string,write_string("Warning Update - Unknown element for commonfield ",i_elem))
			      _continue
			_endif
		
			_for j_elem _over i_elem.xml_elements()
			_loop l_pairs[j_elem.type] << j_elem.get_element_contents()
			_endloop
			
			_if (l_name << l_pairs[:name]) _isnt _unset
			_then l_list[l_name.as_symbol()] << l_pairs
			_endif
			
		_endloop
		
	_endloop

	#DEBUG print(l_grp_list)
	>> l_grp_list
_endmethod
$

_pragma(classify_level=restricted, topic={dmdw,dm_doc_writer},usage={internal})
_private _method dm_xml_writer.handle_updates_for_geometry_mappings(a_xml)
	## 
	## a_xml can be of any type
	##
	
	_local l_list << property_list.new()
	_for i_elem _over a_xml.xml_elements()
	_loop
		_local l_pairs << property_list.new()
		_if i_elem.type ~= :mapping
		_then condition.raise(:warning,:string,write_string("Warning Update - Expected mapping element ",i_elem))
		      _continue
		_endif
		
		_for j_elem _over i_elem.xml_elements()
		_loop
			_local l_cont << j_elem.get_element_contents()
			l_pairs[j_elem.type] << l_cont
		_endloop
		_if (l_name << l_pairs[:method]) _isnt _unset 
		_then l_list[l_name.as_symbol()] << l_pairs[:description]
		_endif
		
	_endloop

	#DEBUG print(l_list)
	>> l_list
_endmethod
$

_pragma(classify_level=restricted, topic={dmdw,dm_doc_writer},usage={internal})
_method dm_xml_writer.post_process()
	## 
	##

	_self.create_svg()

_endmethod
$

_pragma(classify_level=restricted, topic={dmdw,dm_doc_writer},usage={internal})
_method dm_xml_writer.create_svg()
	## 
	## 

	
	_if (l_svg_writer_cls << !current_package![:dm_svg_writer]) _isnt _unset _andif
	    (l_case_soc_name << .properties[:case]) _isnt _unset _andif 
	    (l_cv << _self.opened_case( l_case_soc_name )) _isnt _unset 
	_then 

		_local ( l_name, l_dir ) << system.pathname_components( .out_file )
		_local ( l_base, l_ext ) << system.split_filename( l_name )
		_local l_file_name << system.pathname_from_components( write_string(l_base,".svg"), l_dir )
		
		_local l_svg_writer << l_svg_writer_cls.new( l_cv )
		write("Creating SVG for ",.exported_collections," to ", l_file_name)
		l_svg_writer.create_svg_for( .exported_collections, l_file_name )

	_else
		condition.raise(:warning,:string,"Could not create SVG!")
	_endif

_endmethod
$

_pragma(classify_level=restricted, topic={dmdw,dm_doc_writer},usage={internal})
_method dm_xml_writer.opened_case( soc_name )
	## 
	## 

	_local l_ds
	
	_if (l_soc << gis_program_manager.spatial_object_controller(soc_name)) _isnt _unset
	_then
		_if l_soc.has_multiple_datasets?
		_then
			condition.raise(:warning,:string,"Select a Case to proceed")
			
		_elif l_soc.has_open_datasets?
		_then
			l_ds << _for i_ds _over l_soc.datasets()
			_loop _leave _with i_ds
			_endloop
			condition.raise(:information,:string,write_string("Open Case database used ",
									  l_ds))
		_endif
	_endif

	>> l_ds

_endmethod
$
