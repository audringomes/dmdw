#% text_encoding = iso8859_1
# ************************************************************
#
# BOOGERT-LAB / Realworld Software Products BV 2021
#
# ************************************************************

_package sw

_pragma(classify_level=basic, topic={dmdw,dm_svg_writer},usage={internal})
_method case_relationship.as_svg_polyline( p_properties)
	## 
	##
	
	>> _self.representation_geometry.as_svg_polyline( p_properties )
_endmethod
$

_pragma(classify_level=basic, topic={dmdw,dm_svg_writer},usage={internal})
_method case_relationship.as_diagram_element( p_properties )
	## 
	## return <g id=id>
	##         <title>description</title>
	##         <polyline></polyline>
	##        </g>
	##
	## or, if _self.a_element() isnt _unset, return the above as
	## part of an <a> element:
	##
	## return <a href="">
	##         <g id=id>
	##           <title>description</title>
	##           <polyline></polyline>
	##         </g>
	##        </a>
	##

	_local l_parent << _self.parent_object_or_table
	_local l_child << _self.child_object_or_table
	_local l_id << write_string(l_parent.name,%.,l_child.name)

	
	_local l_g << sw:simple_xml_thing.new(:g, rope.new(),property_list.new_with(:id,l_id) )
	l_g.elements.add( sw:simple_xml_thing.new(:title,_self.dmdw_diagram_description()) )
	l_g.elements.add(_self.as_svg_polyline( p_properties ))

	_if (l_hlink << _self.a_element( p_properties )) _isnt _unset 
	_then l_hlink.elements.add( l_g )
	      _return l_hlink
	_endif

	>> l_g
	
_endmethod
$

_pragma(classify_level=basic, topic={dmdw,dm_svg_writer},usage={internal})
_method case_relationship.dmdw_diagram_description()
	## 
	## 

	_local l_parent << _self.parent_object_or_table
	_local l_child << _self.child_object_or_table
	_local l_descr << write_string(l_parent.e_name," > ",l_child.e_name," (",_self.type,%))

	>> l_descr

_endmethod
$
