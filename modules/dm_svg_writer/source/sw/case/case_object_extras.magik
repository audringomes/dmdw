#% text_encoding = iso8859_1
# ************************************************************
#
# BOOGERT-LAB / Realworld Software Products BV 2021
#
# ************************************************************

_package sw
		
_pragma(classify_level=basic, topic={dmdw,dm_svg_writer},usage={internal})
_method case_object.as_svg_text( p_properties )
	## 
	## expect p_properties[:text] and :transform
	##

	#DEBUG write(_self,_self.representation_geometry)
	_local l_elem_props << _self.position.as_svg_xy( p_properties )

	_local l_props << p_properties[:text].copy()
	l_props.add_all(l_elem_props)
	
	_local l_text << sw:simple_xml_thing.new(:text, _self.e_name.write_string, l_props)
	
	>> l_text
_endmethod
$

_pragma(classify_level=basic, topic={dmdw,dm_svg_writer},usage={internal})
_method case_object.as_svg_textbox( p_properties )
	## 
	## returns a g with transform and style with svg text as
	## element
	## expect in P_PROPERTIES a :text_xy_correction, a :transform
	## and a :text_box key/val
	##

	_dynamic !print_float_precision! << 6
		
	#DEBUG write(_self,_self.representation_geometry)
	_local l_xy << _self.position.as_svg_xy( p_properties )
	
	_local l_correction << p_properties[:text_xy_correction]
	_local l_props << property_list.new_with(:transform,write_string("translate(",
									 l_xy[:x].as_number()+l_correction[:x],%,,
									 l_xy[:y].as_number()+l_correction[:y],%)))
	l_props.add_all( p_properties[:text_box] )
	l_props[:id] << _self.name.write_string

	_local l_elems << rope.new()
	_local l_g_element << sw:simple_xml_thing.new(:g, l_elems, l_props)

	_local l_title_text << _if (l_t<<_self.text) _is _unset 
			       _then >> write_string(_self.e_name)
			       _else >> write_string(_self.e_name,newline_char,l_t)
			       _endif
	l_elems.add( sw:simple_xml_thing.new(:title, l_title_text ))
	l_elems.add( sw:simple_xml_thing.new(:text, _self.e_name.write_string, p_properties[:text] ))
	
	>> l_g_element
_endmethod
$

_pragma(classify_level=basic, topic={dmdw,dm_svg_writer},usage={internal})
_method case_object.as_diagram_element( p_properties )
	## 
	##
	
	_local l_txtbox << _self.as_svg_textbox( p_properties)
	_if (l_hlink << _self.a_element( p_properties )) _isnt _unset 
	_then l_hlink.elements.add( l_txtbox )
	      _return l_hlink
	_endif
	
	>> l_txtbox
	
_endmethod
$

_pragma(classify_level=basic, topic={dmdw,dm_svg_writer},usage={internal})
_method case_object.a_element( p_properties )


	_if p_properties[:standalone?] _is _true
	_then _return 
	_endif

	_local l_props << p_properties[:a].copy()
	l_props[:href] << write_string( p_properties[:gis_ds_name],%_,_self.name.write_string,".html")

	a_element << sw:simple_xml_thing.new(:a, rope.new(), l_props)

	>> a_element

_endmethod
$
#
#_pragma(classify_level=basic, topic={dmdw,dm_svg_writer},usage={internal})
#_method case_object.text_joins()
#	## 
#	##
#	_local l_rope << rope.new()
#	_for i _over _self.text_join_fields()
#	_loop l_rope.add(i)
#	_endloop
#	>> l_rope
#_endmethod
#$
